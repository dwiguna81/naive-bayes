# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'PreprocessingView.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import string
import nltk.tokenize
from library import connection, messagebox
from tkinter import Tk
from tkinter.filedialog import askopenfilename
import itertools
from Sastrawi.StopWordRemover.StopWordRemoverFactory import StopWordRemoverFactory
from Sastrawi.Stemmer.StemmerFactory import StemmerFactory
import csv
import subprocess


class Ui_DatasetWindow(object):
    def homeView(self):
        from HomeView import Ui_HomeWindow
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_HomeWindow()
        self.ui.setupUi(self.window)
        self.window.show()

    def preprocessingView(self):
        from preprocessingView import Ui_PreprocessingWindow
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_PreprocessingWindow()
        self.ui.setupUi(self.window)
        self.window.show()

    def naiveBayesView(self):
        from NaiveBayesView import Ui_NaiveBayesWindow
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_NaiveBayesWindow()
        self.ui.setupUi(self.window)
        self.window.show()

    def show_data(self):
        try:
            cur, con = connection()
            cur.execute("SELECT komentar, suka, waktu, userlink, user FROM komentar  WHERE status = 0")
            result = cur.fetchall()
            self.tbDatasetUji.setRowCount(0)
            self.tbDatasetUji.setHorizontalHeaderLabels(['komentar', 'suka', 'waktu', 'userlink', 'user'])

            for row_number, row_data in enumerate(result):
                self.tbDatasetUji.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tbDatasetUji.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))
            con.close()
        except Exception as e:
            print(e)

    def show_dataset(self):
        try:
            cur, con = connection()
            cur.execute("select label, komentar from dataset")
            result = cur.fetchall()
            self.tbDatasetTraining.setRowCount(0)
            self.tbDatasetTraining.setHorizontalHeaderLabels(['sentimen', 'komentar'])

            for row_number, row_data in enumerate(result):
                self.tbDatasetTraining.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tbDatasetTraining.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))
            con.close()
        except Exception as e:
            print(e)

    def import_file(self):
        try:
            Tk().withdraw()
            filename = askopenfilename()
            with open(filename) as csvfile:
                reader = csv.DictReader(csvfile, delimiter = ',')
                cur, con = connection()
                for row in reader:
                    sentimen = row['sentimen'].replace('|', '')
                    komentar = row['komentar'].replace('|', '')
                    sql = "Insert into dataset (label, komentar) values (%s, %s)"
                    data = cur.execute(sql, (sentimen, komentar))
                if(data):
                    messagebox('Sukses', 'Import berhasil')
                    cur.execute('Select label, komentar from dataset')
                    result = cur.fetchall()
                    self.tbDatasetTraining.setRowCount(0)
                    self.tbDatasetTraining.setHorizontalHeaderLabels(['label', 'komentar'])

                    for row_number, row_data in enumerate(result):
                        self.tbDatasetTraining.insertRow(row_number)
                        for column_number, data in enumerate(row_data):
                            self.tbDatasetTraining.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))
                    con.close()
        except Exception as e:
            print(e)

    def getKomentar(self):
        try:
            cur, con = connection()
            cur.execute("SELECT komentar, label FROM dataset")
            komentar = cur.fetchall()

            return komentar
        except Exception as e:
            print(e)

    def getPreprocessingTesting(self):
        try:
            cur, con = connection()
            cur.execute("SELECT komentar FROM preprocessing_testing")
            data = cur.fetchall()

            preprocessing_testing = []
            for row in data:
                preprocessing_testing.extend(row)

            return preprocessing_testing
        except Exception as e:
            print(e)

    def pembobotan(self):
        try:
            cur, con = connection()
            preprocessing_testing = self.getPreprocessingTesting()
            komentar = self.getKomentar()

            filter_comment = []
            for j in preprocessing_testing:
                if j not in [f[0] for f in filter_comment]:
                    data = [j, 0, 0, 0]
                    filter_comment.append(data)

            for f in filter_comment:
                for k in komentar:
                    if f[0] in k[0].lower():
                        if k[1] == 'positive':
                            f[1] = f[1] + 1
                        elif k[1] == 'negative':
                            f[2] = f[2] + 1
                        else:
                            f[3] = f[3] + 1

            for f in filter_comment:
                sql_pembobotan = "insert into pembobotan (kata, positive, negative, neutral) values (%s, %s, %s, %s)"
                save_pembobotan = cur.execute(sql_pembobotan, (f[0], f[1], f[2], f[3]))

            return save_pembobotan
        except Exception as e:
            print(e)

    def processPreprocessing(self, data):
        try:
            stopFactory = StopWordRemoverFactory()
            stopword = stopFactory.create_stop_word_remover()
            stemFactory = StemmerFactory()
            stemmer = stemFactory.create_stemmer()

            data_proses = []
            for d in data:
                tokenize_tempo = []
                data_tempo = d[1].translate(str.maketrans(string.punctuation, ' '*len(string.punctuation))).lower()
                stopword_tempo = stopword.remove(data_tempo)
                tokenize_tempo.extend(nltk.tokenize.word_tokenize(stopword_tempo))
                for t in tokenize_tempo:
                    if len(t) != 1:
                        value = [stemmer.stem(t), d[0]]
                        data_proses.append(value)

            return list(filter(None, data_proses))
        except Exception as e:
            print(e)

    def preprocessing(self):
        try:
            messagebox("PEMBERITAHUAN", "Sistem sedang melakukan preprocessing data komentar, harap tunggu!")
            cur, con = connection()
            # cur.execute('select id, komentar from dataset')
            # komentar_testing = cur.fetchall()

            cur.execute('select id, komentar from komentar')
            komentar_uji = cur.fetchall()

            uji = self.processPreprocessing(komentar_uji)
            # testing = self.processPreprocessing(komentar_testing)

            for data_uji in uji:
                if len(data_uji) != 1:
                    sql_uji = "insert into preprocessing_uji (komentar, id_komentar) values (%s, %s)"
                    save_uji = cur.execute(sql_uji, data_uji)

            # for data_testing in testing:
            #     if len(data_testing) != 1:
            #         sql_testing = "insert into preprocessing_testing (komentar, id_komentar) values (%s, %s)"
            #         save_testing = cur.execute(sql_testing, data_testing)

            pembobotan = self.pembobotan()

            if (save_uji and pembobotan):
                sql = "UPDATE komentar SET status=%s WHERE status=%s"
                cur.execute(sql, (1, 0))

                messagebox("SUKSES", "Data Preprocessing Tersimpan")

                cur, con = connection()
                cur.execute("SELECT komentar, suka, waktu, userlink, user FROM komentar  WHERE status = 0")
                result = cur.fetchall()
                self.tbDatasetUji.setRowCount(0)
                self.tbDatasetUji.setHorizontalHeaderLabels(['komentar', 'suka', 'waktu', 'userlink', 'user'])

                for row_number, row_data in enumerate(result):
                    self.tbDatasetUji.insertRow(row_number)
                    for column_number, data in enumerate(row_data):
                        self.tbDatasetUji.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))
                con.close()
            else:
                messagebox("GAGAL", "Data Preprocessing Gagal Disimpan")
        except Exception as e:
            print(e)

    def setupUi(self, DatasetWindow):
        DatasetWindow.setObjectName("DatasetWindow")
        DatasetWindow.resize(800, 597)
        self.centralwidget = QtWidgets.QWidget(DatasetWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 30, 801, 61))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("background-color: rgb(0, 143, 241);\n"
"color: rgb(255, 255, 255);")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.tbDatasetTraining = QtWidgets.QTableWidget(self.centralwidget)
        self.tbDatasetTraining.setGeometry(QtCore.QRect(20, 210, 371, 311))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(10)
        self.tbDatasetTraining.setFont(font)
        self.tbDatasetTraining.setObjectName("tbDatasetTraining")
        self.tbDatasetTraining.setColumnCount(2)
        self.tbDatasetTraining.setRowCount(0)
        self.show_dataset()
        header = self.tbDatasetTraining.horizontalHeader()
        header.setStretchLastSection(True)
        self.tbDatasetUji = QtWidgets.QTableWidget(self.centralwidget)
        self.tbDatasetUji.setGeometry(QtCore.QRect(410, 160, 371, 361))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(10)
        self.tbDatasetUji.setFont(font)
        self.tbDatasetUji.setObjectName("tbDatasetUji")
        self.tbDatasetUji.setColumnCount(5)
        self.tbDatasetUji.setRowCount(0)
        self.show_data()
        self.btnImport = QtWidgets.QPushButton(self.centralwidget)
        self.btnImport.setGeometry(QtCore.QRect(20, 160, 171, 31))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.btnImport.setFont(font)
        self.btnImport.setStyleSheet("background-color: rgb(0, 158, 32);\n"
"color: rgb(255, 255, 255);\n"
"border: none;\n"
"border-radius: 5px;")
        self.btnImport.setObjectName("btnImport")
        self.btnImport.clicked.connect(self.import_file)
        self.btnKosongkan = QtWidgets.QPushButton(self.centralwidget)
        self.btnKosongkan.setGeometry(QtCore.QRect(210, 160, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.btnKosongkan.setFont(font)
        self.btnKosongkan.setStyleSheet("background-color: rgb(226, 0, 0);\n"
"color: rgb(255, 255, 255);\n"
"border: none;\n"
"border-radius: 5px;")
        self.btnKosongkan.setObjectName("btnKosongkan")
        self.btnProses = QtWidgets.QPushButton(self.centralwidget)
        self.btnProses.setGeometry(QtCore.QRect(20, 540, 761, 41))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.btnProses.setFont(font)
        self.btnProses.setStyleSheet("background-color: rgb(0, 143, 241);\n"
"color: rgb(255, 255, 255);\n"
"border: none;\n"
"border-radius: 5px;")
        self.btnProses.setObjectName("btnProses")
        self.btnProses.clicked.connect(self.preprocessing)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(30, 110, 361, 31))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(410, 110, 371, 31))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.btnHome = QtWidgets.QPushButton(self.centralwidget)
        self.btnHome.setGeometry(QtCore.QRect(0, 0, 101, 30))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.btnHome.setFont(font)
        self.btnHome.setStyleSheet("border: 1px solid;\n"
"border-color: rgb(35,178,254);")
        self.btnHome.setObjectName("btnHome")
        self.btnHome.clicked.connect(self.homeView)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(-4, 0, 811, 31))
        self.label_4.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.btnDataset = QtWidgets.QPushButton(self.centralwidget)
        self.btnDataset.setGeometry(QtCore.QRect(100, 0, 101, 30))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.btnDataset.setFont(font)
        self.btnDataset.setStyleSheet("background-color: rgb(35,178,254);\n"
"color: rgb(255, 255, 255);\n"
"border: none;")
        self.btnDataset.setObjectName("btnDataset")
        self.btnPreprocessing = QtWidgets.QPushButton(self.centralwidget)
        self.btnPreprocessing.setGeometry(QtCore.QRect(200, 0, 101, 30))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.btnPreprocessing.setFont(font)
        self.btnPreprocessing.setStyleSheet("border: 1px solid;\n"
"border-color: rgb(35,178,254);")
        self.btnPreprocessing.setObjectName("btnPreprocessing")
        self.btnPreprocessing.clicked.connect(self.preprocessingView)
        self.btnAlgoritma = QtWidgets.QPushButton(self.centralwidget)
        self.btnAlgoritma.setGeometry(QtCore.QRect(300, 0, 141, 30))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.btnAlgoritma.setFont(font)
        self.btnAlgoritma.setStyleSheet("border: 1px solid;\n"
"border-color: rgb(35,178,254);")
        self.btnAlgoritma.setObjectName("btnAlgoritma")
        self.btnAlgoritma.clicked.connect(self.naiveBayesView)
        self.label_4.raise_()
        self.label.raise_()
        self.tbDatasetTraining.raise_()
        self.tbDatasetUji.raise_()
        self.btnImport.raise_()
        self.btnKosongkan.raise_()
        self.btnProses.raise_()
        self.label_2.raise_()
        self.label_3.raise_()
        self.btnHome.raise_()
        self.btnDataset.raise_()
        self.btnPreprocessing.raise_()
        self.btnAlgoritma.raise_()
        DatasetWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(DatasetWindow)
        QtCore.QMetaObject.connectSlotsByName(DatasetWindow)

    def retranslateUi(self, DatasetWindow):
        _translate = QtCore.QCoreApplication.translate
        DatasetWindow.setWindowTitle(_translate("DatasetWindow", "MainWindow"))
        self.label.setText(_translate("DatasetWindow", "DATASET"))
        self.btnImport.setText(_translate("DatasetWindow", "Tambah Dataset"))
        self.btnKosongkan.setText(_translate("DatasetWindow", "Kosongkan"))
        self.btnProses.setText(_translate("DatasetWindow", "Preprocessing Dataset"))
        self.label_2.setText(_translate("DatasetWindow", "Dataset Training"))
        self.label_3.setText(_translate("DatasetWindow", "Dataset Uji"))
        self.btnHome.setText(_translate("DatasetWindow", "Home"))
        self.btnDataset.setText(_translate("DatasetWindow", "Dataset"))
        self.btnPreprocessing.setText(_translate("DatasetWindow", "Preprocessing"))
        self.btnAlgoritma.setText(_translate("DatasetWindow", "Algoritma Naive bayes"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    DatasetWindow = QtWidgets.QMainWindow()
    ui = Ui_DatasetWindow()
    ui.setupUi(DatasetWindow)
    DatasetWindow.show()
    sys.exit(app.exec_())
