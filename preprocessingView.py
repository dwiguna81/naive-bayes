# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'PembobotanView.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from library import connection, messagebox


class Ui_PreprocessingWindow(object):
    def homeView(self):
        from HomeView import Ui_HomeWindow
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_HomeWindow()
        self.ui.setupUi(self.window)
        self.window.show()

    def datasetView(self):
        from DatasetView import Ui_DatasetWindow
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_DatasetWindow()
        self.ui.setupUi(self.window)
        self.window.show()

    def naiveBayesView(self):
        from NaiveBayesView import Ui_NaiveBayesWindow
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_NaiveBayesWindow()
        self.ui.setupUi(self.window)
        self.window.show()

    def show_data_testing(self):
        try:
            cur, con = connection()
            cur.execute("SELECT komentar FROM preprocessing_testing")
            result = cur.fetchall()
            self.tableTesting.setRowCount(0)
            self.tableTesting.setHorizontalHeaderLabels(['komentar'])

            for row_number, row_data in enumerate(result):
                self.tableTesting.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableTesting.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))
            con.close()
        except Exception as e:
            print(e)

    def show_data_uji(self):
        try:
            cur, con = connection()
            cur.execute("SELECT komentar FROM preprocessing_uji WHERE status = 0")
            result = cur.fetchall()
            self.tableUji.setRowCount(0)
            self.tableUji.setHorizontalHeaderLabels(['komentar'])

            for row_number, row_data in enumerate(result):
                self.tableUji.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableUji.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))
            con.close()
        except Exception as e:
            print(e)

    def pembobotan(self):
        cur, con = connection()
        cur.execute("SELECT kata, positive, negative, neutral FROM pembobotan")
        data = cur.fetchall()

        self.tableBobot.setRowCount(0)
        self.tableBobot.setHorizontalHeaderLabels(['kata', 'positif', 'negatif', 'netral'])

        for row_number, row_data in enumerate(data):
            self.tableBobot.insertRow(row_number)
            for column_number, data in enumerate(row_data):
                self.tableBobot.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))

    def probabilitasLikehood(self):
        cur, con = connection()
        cur.execute("SELECT kata, positive, negative, neutral FROM pembobotan")
        pembobotan = cur.fetchall()

        positive = 0
        negative = 0
        neutral = 0
        total = 0
        for p in pembobotan:
            positive = positive + p[1]
            negative = negative + p[2]
            neutral = neutral + p[3]

            total = positive + negative + neutral

        likehood = []
        for pem in pembobotan:
            likePositif = (pem[1] + 1) / (positive + total)
            likeNegatif = (pem[2] + 1) / (negative + total)
            likeNetral = (pem[3] + 1) / (neutral + total)

            likehood.append([pem[0], likePositif, likeNegatif, likeNetral])

        return likehood

    def processAlgoritma(self):
        prior = 1 / 3
        likehood = self.probabilitasLikehood()

        cur, con = connection()
        cur.execute('Select id, komentar from komentar')
        komentar_uji = cur.fetchall()
        cur.execute('Select komentar, id_komentar from preprocessing_uji')
        preprocessing_uji = cur.fetchall()

        newArray = []
        for ku in komentar_uji:
            data = [ku[0]]
            for pu in preprocessing_uji:
                if ku[0] == pu[1]:
                    data.append(pu[0])
            newArray.append(data)

        perhitungan = []
        for na in newArray:
            value = [na[0]]
            for n in na[1:]:
                for l in likehood:
                    if n == l[0]:
                        value.append(l)
            perhitungan.append(value)

        for perhit in perhitungan:
            hitungPositif = 0
            hitungNegatif = 0
            hitungNetral = 0
            for per in perhit[1:]:
                if hitungPositif == 0:
                    hitungPositif = per[1] * prior
                    hitungNegatif = per[2] * prior
                    hitungNetral = per[3] * prior
                else:
                    hitungPositif = hitungPositif * per[1]
                    hitungNegatif = hitungNegatif * per[2]
                    hitungNetral = hitungNetral * per[3]

            for komen in komentar_uji:
                if komen[0] == perhit[0]:
                    sentimen = ''
                    if hitungPositif > hitungNegatif > hitungNetral:
                        sentimen = 'Positive'
                    elif hitungNegatif > hitungPositif > hitungNetral:
                        sentimen = 'Negative'
                    else:
                        sentimen = 'Neutral'

                    hasil_algoritma = [komen[1], sentimen]
                    sql_algoritma = "insert into naive_bayes (komentar, sentimen) values (%s, %s)"
                    save_algoritma = cur.execute(sql_algoritma, hasil_algoritma)

        if (save_algoritma):
            messagebox("SUKSES", "Data Perhitungan Algoritma Tersimpan")

            sql = "UPDATE preprocessing_uji SET status=%s WHERE status=%s"
            cur.execute(sql, (1, 0))

            cur, con = connection()
            cur.execute("SELECT komentar FROM preprocessing_uji WHERE status = 0")
            result = cur.fetchall()
            self.tableUji.setRowCount(0)
            self.tableUji.setHorizontalHeaderLabels(['komentar'])

            for row_number, row_data in enumerate(result):
                self.tableUji.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableUji.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))
            con.close()
        else:
            messagebox("GAGAL", "Data Perhitungan Algoritma Gagal Disimpan")

    def setupUi(self, PreprocessingWindow):
        PreprocessingWindow.setObjectName("PreprocessingWindow")
        PreprocessingWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(PreprocessingWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 30, 801, 61))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("background-color: rgb(0, 143, 241);\n"
"color: rgb(255, 255, 255);")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.tableTesting = QtWidgets.QTableWidget(self.centralwidget)
        self.tableTesting.setGeometry(QtCore.QRect(40, 140, 341, 171))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(10)
        self.tableTesting.setFont(font)
        self.tableTesting.setObjectName("tableTesting")
        self.tableTesting.setColumnCount(1)
        self.tableTesting.setRowCount(0)
        self.show_data_testing()
        header = self.tableTesting.horizontalHeader()
        header.setStretchLastSection(True)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableTesting.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableTesting.setHorizontalHeaderItem(1, item)
        self.tableUji = QtWidgets.QTableWidget(self.centralwidget)
        self.tableUji.setGeometry(QtCore.QRect(40, 360, 341, 161))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(10)
        self.tableUji.setFont(font)
        self.tableUji.setObjectName("tableUji")
        self.tableUji.setColumnCount(1)
        self.tableUji.setRowCount(0)
        self.show_data_uji()
        header = self.tableUji.horizontalHeader()
        header.setStretchLastSection(True)
        self.tableBobot = QtWidgets.QTableWidget(self.centralwidget)
        self.tableBobot.setGeometry(QtCore.QRect(410, 140, 351, 381))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(10)
        self.tableBobot.setFont(font)
        self.tableBobot.setObjectName("tableBobot")
        self.tableBobot.setColumnCount(4)
        self.tableBobot.setRowCount(0)
        self.pembobotan()
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(40, 105, 341, 21))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(40, 330, 341, 21))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(410, 110, 351, 21))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.btnHitung = QtWidgets.QPushButton(self.centralwidget)
        self.btnHitung.setGeometry(QtCore.QRect(40, 540, 721, 41))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.btnHitung.setFont(font)
        self.btnHitung.setStyleSheet("background-color: rgb(0, 143, 241);\n"
"color: rgb(255, 255, 255);\n"
"border: none;\n"
"border-radius: 5px;")
        self.btnHitung.setObjectName("btnHitung")
        self.btnHitung.clicked.connect(self.processAlgoritma)
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(-4, 0, 811, 31))
        self.label_5.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_5.setText("")
        self.label_5.setObjectName("label_5")
        self.btnHome = QtWidgets.QPushButton(self.centralwidget)
        self.btnHome.setGeometry(QtCore.QRect(0, 0, 101, 30))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.btnHome.setFont(font)
        self.btnHome.setStyleSheet("border: 1px solid;\n"
"border-color: rgb(35,178,254);")
        self.btnHome.setObjectName("btnHome")
        self.btnHome.clicked.connect(self.homeView)
        self.btnDataset = QtWidgets.QPushButton(self.centralwidget)
        self.btnDataset.setGeometry(QtCore.QRect(100, 0, 101, 30))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.btnDataset.setFont(font)
        self.btnDataset.setStyleSheet("border: 1px solid;\n"
"border-color: rgb(35,178,254);")
        self.btnDataset.setObjectName("btnDataset")
        self.btnDataset.clicked.connect(self.datasetView)
        self.btnPreprocessing = QtWidgets.QPushButton(self.centralwidget)
        self.btnPreprocessing.setGeometry(QtCore.QRect(200, 0, 101, 30))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.btnPreprocessing.setFont(font)
        self.btnPreprocessing.setStyleSheet("background-color: rgb(35,178,254);\n"
"color: rgb(255, 255, 255);\n"
"border: none;")
        self.btnPreprocessing.setObjectName("btnPreprocessing")
        self.btnAlgoritma = QtWidgets.QPushButton(self.centralwidget)
        self.btnAlgoritma.setGeometry(QtCore.QRect(300, 0, 141, 30))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.btnAlgoritma.setFont(font)
        self.btnAlgoritma.setStyleSheet("border: 1px solid;\n"
"border-color: rgb(35,178,254);")
        self.btnAlgoritma.setObjectName("btnAlgoritma")
        self.btnAlgoritma.clicked.connect(self.naiveBayesView)
        self.label_5.raise_()
        self.label.raise_()
        self.tableTesting.raise_()
        self.tableUji.raise_()
        self.tableBobot.raise_()
        self.label_2.raise_()
        self.label_3.raise_()
        self.label_4.raise_()
        self.btnHitung.raise_()
        self.btnHome.raise_()
        self.btnDataset.raise_()
        self.btnPreprocessing.raise_()
        self.btnAlgoritma.raise_()
        PreprocessingWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(PreprocessingWindow)
        QtCore.QMetaObject.connectSlotsByName(PreprocessingWindow)

    def retranslateUi(self, PreprocessingWindow):
        _translate = QtCore.QCoreApplication.translate
        PreprocessingWindow.setWindowTitle(_translate("PreprocessingWindow", "Preprocessing View"))
        self.label.setText(_translate("PreprocessingWindow", "Preprocessing & Pembobotan"))
        item = self.tableTesting.horizontalHeaderItem(0)
        item.setText(_translate("PreprocessingWindow", "Komentar"))
        self.label_2.setText(_translate("PreprocessingWindow", "Preprocessing Testing"))
        self.label_3.setText(_translate("PreprocessingWindow", "Preprocessing Uji"))
        self.label_4.setText(_translate("PreprocessingWindow", "Pembobotan Testing"))
        self.btnHitung.setText(_translate("PreprocessingWindow", "Perhitungan Algoritma Naive Bayes"))
        self.btnHome.setText(_translate("PreprocessingWindow", "Home"))
        self.btnDataset.setText(_translate("PreprocessingWindow", "Dataset"))
        self.btnPreprocessing.setText(_translate("PreprocessingWindow", "Preprocessing"))
        self.btnAlgoritma.setText(_translate("PreprocessingWindow", "Algoritma Naive Bayes"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    PreprocessingWindow = QtWidgets.QMainWindow()
    ui = Ui_PreprocessingWindow()
    ui.setupUi(PreprocessingWindow)
    PreprocessingWindow.show()
    sys.exit(app.exec_())
