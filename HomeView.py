# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainView.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from library import connection, messagebox
from youtube_comment_scraper_python import *
import itertools


class Ui_HomeWindow(object):
    def datasetView(self):
        from DatasetView import Ui_DatasetWindow
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_DatasetWindow()
        self.ui.setupUi(self.window)
        self.window.show()

    def preprocessingView(self):
        from preprocessingView import Ui_PreprocessingWindow
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_PreprocessingWindow()
        self.ui.setupUi(self.window)
        self.window.show()

    def naiveBayesView(self):
        from NaiveBayesView import Ui_NaiveBayesWindow
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_NaiveBayesWindow()
        self.ui.setupUi(self.window)
        self.window.show()

    def save(self):
        link = self.txtLink.text()
        insert = (link)
        cur, con = connection()
        sql = "INSERT INTO link (link) VALUES (%s)"
        data = cur.execute(sql, insert)
        if(data):
            messagebox('SUKSES', "Data Link Tersimpan")
            self.txtLink.setText('')
            cur.execute("SELECT link FROM link WHERE status = 0")
            result = cur.fetchall()
            self.tbLink.setRowCount(0)

            for row_number, row_data in enumerate(result):
                self.tbLink.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tbLink.setItem(row_number, column_number,
                                        QtWidgets.QTableWidgetItem(str(data)))
            con.close()
        else:
            messagebox('GAGAL', "Data Gagal Tersimpan")

    def show_data(self):
        cur, con = connection()
        cur.execute("SELECT link FROM link WHERE status = 0")
        result = cur.fetchall()
        self.tbLink.setRowCount(0)

        for row_number, row_data in enumerate(result):
            self.tbLink.insertRow(row_number)
            for column_number, data in enumerate(row_data):
                self.tbLink.setItem(row_number, column_number,
                                    QtWidgets.QTableWidgetItem(str(data)))
        con.close()

    def cellClickedTable(self, row, column):
        current_row = self.tbLink.currentRow()
        current_column = self.tbLink.currentColumn()
        cell_value = self.tbLink.item(current_row, current_column).text()
        cur, con = connection()
        sql = "SELECT * FROM link WHERE link = %s"
        cur.execute(sql, cell_value)
        result = cur.fetchone()
        self.txtId.setText(str(result[0]))
        self.txtLink.setText(result[1])
        self.btnUpdate.setEnabled(True)
        self.btnHapus.setEnabled(True)
        self.btnTambah.setEnabled(False)

    def update(self):
        id = self.txtId.text()
        link = self.txtLink.text()
        cur, con = connection()
        sql = "UPDATE link SET link=%s WHERE id=%s"
        data = cur.execute(sql, (link, id))
        if(data):
            messagebox("SUKSES", "Data Berhasil Di Perbarui")
            self.txtLink.setText('')
            cur.execute("SELECT link FROM link WHERE status = 0")
            result = cur.fetchall()
            self.tbLink.setRowCount(0)

            for row_number, row_data in enumerate(result):
                self.tbLink.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tbLink.setItem(row_number, column_number,
                                        QtWidgets.QTableWidgetItem(str(data)))
            con.close()
            self.btnUpdate.setEnabled(False)
            self.btnHapus.setEnabled(False)
            self.btnTambah.setEnabled(True)
        else:
            messagebox("GAGAL", "Data Gagal Di Perbarui")

    def delete(self):
        id = self.txtId.text()
        cur, con = connection()
        sql = "DELETE FROM link WHERE id=%s"
        data = cur.execute(sql, id)
        if(data):
            messagebox("SUKSES", "Data Berhasil Di Hapus")
            self.txtLink.setText('')
            cur.execute("SELECT link FROM link WHERE status = 0")
            result = cur.fetchall()
            self.tbLink.setRowCount(0)

            for row_number, row_data in enumerate(result):
                self.tbLink.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tbLink.setItem(row_number, column_number,
                                        QtWidgets.QTableWidgetItem(str(data)))
            con.close()
            self.btnUpdate.setEnabled(False)
            self.btnHapus.setEnabled(False)
            self.btnTambah.setEnabled(True)
        else:
            messagebox("GAGAL", "Data Gagal Di Hapus")

    def get_comment(self):
        try:
            messagebox("PEMBERITAHUAN", "Sistem sedang melakukan scraping data komentar, harap tunggu!")
            cur, con = connection()
            cur.execute('SELECT link from link WHERE status = 0')
            result = cur.fetchall()

            tuple_links = []
            for h in result:
                tuple_links.append(h)

            links = list(itertools.chain(*tuple_links))

            for i in links:
                youtube.open(i)

                for j in range(0, 5):
                    response = youtube.video_comments()
                    data = response['body']

                for k in data:
                    comment = k["Comment"]
                    suka = k["Likes"]
                    waktu = k["Time"]
                    userlink = k["UserLink"]
                    user = k["user"]
                    sql = "INSERT INTO komentar (komentar, suka, waktu, userlink, user) Values (%s, %s, %s, %s, %s)"
                    insertToDB = cur.execute(sql, (comment, suka, waktu, userlink, user))

            sql = "UPDATE link SET status=%s WHERE status=%s"
            cur.execute(sql, (1, 0))

            if (insertToDB):
                messagebox("SUKSES", "Data Komentar Berhasil Di Simpan")
                cur.execute("SELECT link FROM link WHERE status = 0")
                result = cur.fetchall()
                self.tbLink.setRowCount(0)

                for row_number, row_data in enumerate(result):
                    self.tbLink.insertRow(row_number)
                    for column_number, data in enumerate(row_data):
                        self.tbLink.setItem(row_number, column_number,
                                            QtWidgets.QTableWidgetItem(str(data)))
                con.close()
                self.btnUpdate.setEnabled(False)
                self.btnHapus.setEnabled(False)
                self.btnTambah.setEnabled(True)
            else:
                messagebox("GAGAL", "Data Gagal Di Hapus")
        except Exception as e:
            print(e)

    def setupUi(self, HomeWindow):
        HomeWindow.setObjectName("HomeWindow")
        HomeWindow.resize(800, 596)
        self.centralwidget = QtWidgets.QWidget(HomeWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.btnTambah = QtWidgets.QPushButton(self.centralwidget)
        self.btnTambah.setGeometry(QtCore.QRect(650, 110, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.btnTambah.setFont(font)
        self.btnTambah.setStyleSheet("background-color: rgb(0,143,241);\n"
"color: rgb(255, 255, 255);\n"
"border: none;\n"
"border-radius: 5px;")
        self.btnTambah.setObjectName("btnTambah")
        self.btnTambah.clicked.connect(self.save)
        self.btnGetComment = QtWidgets.QPushButton(self.centralwidget)
        self.btnGetComment.setGeometry(QtCore.QRect(590, 530, 161, 41))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.btnGetComment.setFont(font)
        self.btnGetComment.setStyleSheet("background-color: rgb(0,143,241);\n"
"color: rgb(255, 255, 255);\n"
"border: none;\n"
"border-radius: 5px;")
        self.btnGetComment.setObjectName("btnGetComment")
        self.btnGetComment.clicked.connect(self.get_comment)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 30, 801, 61))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("background-color: rgb(0,143,241);\n"
"color: rgb(255, 255, 255);")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.txtLink = QtWidgets.QLineEdit(self.centralwidget)
        self.txtLink.setGeometry(QtCore.QRect(160, 110, 481, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.txtLink.setFont(font)
        self.txtLink.setStyleSheet("border-radius: 5px;\n"
"padding-left: 8px;")
        self.txtLink.setText("")
        self.txtLink.setObjectName("txtLink")
        self.tbLink = QtWidgets.QTableWidget(self.centralwidget)
        self.tbLink.setGeometry(QtCore.QRect(50, 160, 701, 351))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(10)
        self.tbLink.setFont(font)
        self.tbLink.setStyleSheet("")
        self.tbLink.setRowCount(10)
        self.tbLink.setObjectName("tbLink")
        self.tbLink.setColumnCount(1)
        self.show_data()
        self.tbLink.cellClicked.connect(self.cellClickedTable)
        item = QtWidgets.QTableWidgetItem()
        self.tbLink.setHorizontalHeaderItem(0, item)
        header = self.tbLink.horizontalHeader()
        header.setStretchLastSection(True)
        self.txtId = QtWidgets.QLineEdit(self.centralwidget)
        self.txtId.setGeometry(QtCore.QRect(490, 120, 113, 20))
        self.txtId.setObjectName("txtId")
        self.btnHapus = QtWidgets.QPushButton(self.centralwidget)
        self.btnHapus.setGeometry(QtCore.QRect(490, 530, 91, 41))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.btnHapus.setFont(font)
        self.btnHapus.setStyleSheet("background-color: rgb(226, 0, 0);\n"
"color: rgb(255, 255, 255);\n"
"border: none;\n"
"border-radius: 5px;")
        self.btnHapus.setObjectName("btnHapus")
        self.btnHapus.setEnabled(False)
        self.btnHapus.clicked.connect(self.delete)
        self.btnUpdate = QtWidgets.QPushButton(self.centralwidget)
        self.btnUpdate.setGeometry(QtCore.QRect(390, 530, 91, 41))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.btnUpdate.setFont(font)
        self.btnUpdate.setStyleSheet("background-color: rgb(255,255,70);\n"
"border-none;\n"
"border-radius: 5px;")
        self.btnUpdate.setObjectName("btnUpdate")
        self.btnUpdate.setEnabled(False)
        self.btnUpdate.clicked.connect(self.update)
        self.btnHome = QtWidgets.QPushButton(self.centralwidget)
        self.btnHome.setGeometry(QtCore.QRect(0, 0, 101, 30))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.btnHome.setFont(font)
        self.btnHome.setStyleSheet("background-color: rgb(35,178,254);\n"
"color: rgb(255, 255, 255);\n"
"border: none;")
        self.btnHome.setObjectName("btnHome")
        self.btnDataset = QtWidgets.QPushButton(self.centralwidget)
        self.btnDataset.setGeometry(QtCore.QRect(100, 0, 101, 30))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(9)
        self.btnDataset.setFont(font)
        self.btnDataset.setStyleSheet("border: 1px solid;\n"
"border-color: rgb(35,178,254);")
        self.btnDataset.setObjectName("btnDataset")
        self.btnDataset.clicked.connect(self.datasetView)
        self.btnPreprocessing = QtWidgets.QPushButton(self.centralwidget)
        self.btnPreprocessing.setGeometry(QtCore.QRect(200, 0, 101, 30))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(9)
        self.btnPreprocessing.setFont(font)
        self.btnPreprocessing.setStyleSheet("border: 1px solid;\n"
"border-color: rgb(35,178,254);")
        self.btnPreprocessing.setObjectName("btnPreprocessing")
        self.btnPreprocessing.clicked.connect(self.preprocessingView)
        self.btnAlgoritma = QtWidgets.QPushButton(self.centralwidget)
        self.btnAlgoritma.setGeometry(QtCore.QRect(300, 0, 141, 30))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(9)
        self.btnAlgoritma.setFont(font)
        self.btnAlgoritma.setStyleSheet("border: 1px solid;\n"
"border-color: rgb(35,178,254);")
        self.btnAlgoritma.setObjectName("btnAlgoritma")
        self.btnAlgoritma.clicked.connect(self.naiveBayesView)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(-4, 0, 811, 31))
        self.label_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(50, 110, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.txtNamaLogin = QtWidgets.QLabel(self.centralwidget)
        self.txtNamaLogin.setGeometry(QtCore.QRect(650, 5, 151, 21))
        self.txtNamaLogin.setText("")
        self.txtNamaLogin.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.txtNamaLogin.setObjectName("txtNamaLogin")
        self.label_2.raise_()
        self.txtId.raise_()
        self.btnTambah.raise_()
        self.btnGetComment.raise_()
        self.label.raise_()
        self.txtLink.raise_()
        self.tbLink.raise_()
        self.btnHapus.raise_()
        self.btnUpdate.raise_()
        self.btnHome.raise_()
        self.btnDataset.raise_()
        self.btnPreprocessing.raise_()
        self.btnAlgoritma.raise_()
        self.label_3.raise_()
        self.txtNamaLogin.raise_()
        HomeWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(HomeWindow)
        QtCore.QMetaObject.connectSlotsByName(HomeWindow)

    def retranslateUi(self, HomeWindow):
        _translate = QtCore.QCoreApplication.translate
        HomeWindow.setWindowTitle(_translate("HomeWindow", "Home View"))
        self.btnTambah.setText(_translate("HomeWindow", "Tambah Link"))
        self.btnGetComment.setText(_translate("HomeWindow", "Dapatkan Komentar"))
        self.label.setText(_translate("HomeWindow", "Home"))
        item = self.tbLink.horizontalHeaderItem(0)
        item.setText(_translate("HomeWindow", "Link"))
        self.btnHapus.setText(_translate("HomeWindow", "Hapus"))
        self.btnUpdate.setText(_translate("HomeWindow", "Update"))
        self.btnHome.setText(_translate("HomeWindow", "Home"))
        self.btnDataset.setText(_translate("HomeWindow", "Dataset"))
        self.btnPreprocessing.setText(_translate("HomeWindow", "Preprocessing"))
        self.btnAlgoritma.setText(_translate("HomeWindow", "Algoritma Naive Bayes"))
        self.label_3.setText(_translate("HomeWindow", "Masukkan Link"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    HomeWindow = QtWidgets.QMainWindow()
    ui = Ui_HomeWindow()
    ui.setupUi(HomeWindow)
    HomeWindow.show()
    sys.exit(app.exec_())
